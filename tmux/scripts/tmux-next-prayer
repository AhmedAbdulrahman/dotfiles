#!/usr/bin/env python

# -*- coding: utf-8 -*-
# pylint: disable=missing-docstring,invalid-name

import json
import sys
import os
import io
import time
from datetime import datetime
from tempfile import gettempdir
from urllib.request import urlopen, HTTPError, Request

CACHE = os.path.join(
    gettempdir(),
    ".{}.json".format(time.strftime("%d-%m-%Y", datetime.now().timetuple())),
)
# RED = "#[fg=red]" if os.environ["TMUX"] else "\033[1;31;40m"
PRAYERS = ["Fajr", "Dhuhr", "Asr", "Maghrib", "Isha"]

# https://aladhan.com/prayer-times-api#GetCalendarByCitys
CITY = sys.argv[1] if len(sys.argv) > 1 else "Stockholm"
COUNTRY = sys.argv[2] if len(sys.argv) > 2 else "Sweden"
METHOD = sys.argv[4] if len(sys.argv) > 4 else 3

def get_api(day_time):
    url = (
        "http://api.aladhan.com/v1/timingsByCity?city={city}"
        "&country={country}&method={method}".format(
            city=CITY,
            country=COUNTRY,
            method=METHOD,
        )
    )

    try:
        req = Request(url, data=None)
        response = urlopen(req)
        data = json.load(response)["data"]

        return {"timings": data["timings"], "readable_date": data["date"]["readable"]}
    except HTTPError as err:
        if err.code == 403:
            print(err)
        else:
            print("Something happened! Error code", err.code)


def get_data(day_time):
    if os.path.isfile(CACHE) and os.access(CACHE, os.R_OK):
        with io.open(CACHE) as cache:
            return json.load(cache)
    else:
        data = get_api(day_time)
        with io.open(CACHE, "w") as cache:
            cache.write(json.dumps(data))

        return data


def get_prayer_time(prayer, readable_date, timings):
    return datetime.strptime(
        "{0} {1}".format(readable_date, timings[prayer]), "%d %b %Y %H:%M"
    )


def get_prayer(now):
    data = get_data(now)
    timings = data["timings"]
    readable_date = data["readable_date"]
    after_isha = get_prayer_time(PRAYERS[-1], readable_date, timings)

    if now > after_isha:
        fajr = PRAYERS[0]

        result = "{prayer}: {time}".format(prayer=fajr, time=timings[fajr])
    else:
        for prayer in PRAYERS:
            prayer_time = get_prayer_time(prayer, readable_date, timings)

            if prayer_time >= now:
                now_timestamp = time.mktime(now.timetuple())
                prayer_time_timestamp = time.mktime(prayer_time.timetuple())
                time_remaning = int(prayer_time_timestamp - now_timestamp) / 60

                result = "{prayer}: {time}".format(
                    prayer=prayer,
                    time=timings[prayer],
                )

                break

    return result


print(get_prayer(datetime.now()))
