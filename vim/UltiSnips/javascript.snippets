snippet const "JS Const" b
const ${1:name} = ${0};
endsnippet

snippet ter "Ternary OP" b
${1:cond} ? ${2:true} : ${3: false}
endsnippet

snippet cln "JS Console" b
console.log(${1:'here'})$0
endsnippet

snippet clog "JS Log" b
console.log('$1', $1)$0
endsnippet

snippet olog "JS Object Log" b
console.log({$1})$0
endsnippet

snippet ts "Template String" b
`${$1}`
endsnippet

snippet jlog "Stringfy Log" b
console.log(JSON.stringify({$1}, null, 2))
endsnippet

# Functions

snippet iife
((${1:window, document, undefined}) => {
${0:${VISUAL}}
}(${2:win, doc}))
endsnippet

# Loops

snippet narray "new array"
Array.from(new Array(${1}), (val, index) => (${2}))
endsnippet

snippet for "for loop" !
for (let ${1:i} = 0, len = ${2:array}.length; $1 < len; $1++) {
$0${2/([^.]+).*/$1/}[$1]
}
endsnippet

snippet forof "for of loop" b
for (let ${1:value} of ${2:Things}) {
${0:${VISUAL}}
}
endsnippet

snippet forin "for each loop" b
for (let ${1:key} in ${2:object}) {
  if ($2.hasOwnProperty($1)) {
	${0:let ${3:value} = $2[$1];}
  }
}
endsnippet

# Modules


# Conditionals

snippet if "if" b
if (${1}) {
${0:${VISUAL}}
}
endsnippet

snippet el "else"
else {
${0:${VISUAL}}
}
endsnippet

snippet eif "else if" !
else if (${1}) {
${0:${VISUAL}}
}
endsnippet


# Switches

snippet sw "switch" b
switch (${1}) {
${0:${VISUAL}}
}
endsnippet

snippet case "case" b
case ${1}:
${0:${VISUAL}}
break;
endsnippet

# React

snippet useState "React useState" b
const [${1}, set${2}] = React.useState(${3});${0}
endsnippet

snippet useEffect "React useEffect" b
React.useEffect(() => {
	${1},
}, [${2}]);${0}
endsnippet

snippet map "map" b
${1:iterable}.map(${2:item} =>
	${0},
)
endsnippet

snippet filter "JS Filter" b
${1:iterable}.filter((${2:item}) => {
  ${0}
})
endsnippet

snippet reducer "JS Reducer" b
${1:iterable}.reduce((${2:curr}, ${3:val}) => {
	${0}
}${4:, initial})
endsnippet

snippet find "JS Find" b
${1:iterable}.find((${2:item}) => {
	${0}
})
endsnippet

snippet returnPromise "Return a promise" b
return new Promise((resolve, reject) => {
  ${0}
})
endsnippet

snippet imp "import x from x" b
import { $1 } from '../$2';$0
endsnippet

snippet imr "import React from 'react'" b
import React from 'react';
endsnippet

snippet tl "Throw log" b
throw new Error(JSON.stringify({$0}, null, 2))
endsnippet

snippet try "Try/Catch" b
try {
  $1
}catch (error) {
  $0
}
endsnippet

snippet async "Async Function" b
async function $1($2) {
  $0
}
endsnippet

snippet slog "Spaced console.lo" b
console.log('**************************************************************************\\\\n\\\\n\\\\n')
console.log($0)
console.log('\\\\n\\\\n\\\\n**************************************************************************')
endsnippet

snippet ctor "constructor()" b
constructor(props) {
super(props)
$0
}
endsnippet

snippet dse "getDerivedStateFromError" b
static getDerivedStateFromError(${1:error}) {
$0
}
endsnippet

snippet dsp "getDerivedStateFromProps" b
static getDerivedStateFromProps(${1:nextProps}, ${2:prevState}) {
$0
}
endsnippet

snippet sbu "getSnapshotBeforeUpdate" b
getSnapshotBeforeUpdate(${1:prevProps}, ${2:prevState}) {
$0
}
endsnippet

snippet cdc "componentDidCatch" b
componentDidCatch() {
$0
}
endsnippet

snippet cdm "componentDidMount" b
componentDidMount() {
$0
}
endsnippet

snippet cdu "componentDidUpdate" b
componentDidUpdate(prevProps, prevState) {
$0
}
endsnippet

snippet cwum "componentWillUnmount" b
componentWillUnmount() {
$0
}
endsnippet

snippet scu "shouldComponentUpdate" b
shouldComponentUpdate(nextProps, nextState) {
return ${1:true};
}
endsnippet

snippet reactClass "Create React Class"
import React from 'react'
import PropTypes from 'prop-types'
import classnames from 'classnames'

class ${1:MyComponent} extends React.Component {
	render() {
		const {className, children, ...other} = this.props
		return (
			<${2:div}
				className={classnames(styles.${3:root}, className)}
				{...other}
			>
				${4:children}
			</${2:div}>
		)
	}
}

${1:MyComponent}.propTypes = {
	children: PropTypes.node.isRequired,
	classes: PropTypes.object.isRequired,
	className: PropTypes.string,
}

export default ${1:MyComponent}
endsnippet

snippet reactClassJSS "Create React Class JSS"
import React from 'react'
import PropTypes from 'prop-types'
import classnames from 'classnames'
import withStyles from '../styles/withStyles'

export const styles = theme => ({
	root: {},
})

class ${1:MyComponent} extends React.Component {
	render() {
		const { children, classes, className, ...other} = this.props

		return (
			<${2:div}
				className={classnames(classes.root, className)}
				{...other}
			>
				${3:children}
			</${2:div}>
		)
	}
}

${1:MyComponent}.propTypes = {
	children: PropTypes.node.isRequired,
	classes: PropTypes.object.isRequired,
	className: PropTypes.string,
}

export default withStyles(styles)(${1:MyComponent})
endsnippet

snippet reactStatless "Create React Stateless"
import React from 'react'
import PropTypes from 'prop-types'
import classnames from 'classnames'

const ${1:MyComponent} = (props) => {
	const { className, children, ...other } = props

	return (
		<${2:div}
		className={classnames(styles.${3:root}, className)}
		{...other}
		>
		${4:children}
		</${2:div}>
	)
}

${1:MyComponent}.propTypes = {
children: PropTypes.node.isRequired,
className: PropTypes.string,
}

export default ${1:MyComponent}
endsnippet

snippet reactStatlessCSSModules "Create React Stateless CSS Modules"
import React from 'react'
import PropTypes from 'prop-types'
import classnames from 'classnames'
import styles from './${1}.module.css'

const ${1:MyComponent} = props => {
	const { children, className, ...other } = props

	return (
	<${2:div}
		className={classnames(styles.${3:root}, className)}
		{...other}
	>
		${4:children}
	</${2:div}>
	)
}

${1:MyComponent}.propTypes = {
	children: PropTypes.node.isRequired,
	className: PropTypes.string,
}

export default ${1:MyComponent}
endsnippet

snippet reactStory "Create React Story"
import React from 'react'
import { storiesOf } from '@storybook/react'
import { text, boolean } from '@storybook/addon-knobs'
import ${1:Button} from './'

const stories = storiesOf('Components/${1:Button}', module)

export const Default = () => (
	<${1:Button}
		disabled={boolean('disabled', false)}
	>
		{text('children', 'Just a ${1:Button}')}
	</${1:Button}>
)

stories.add('Default', Default)

export default Default
endsnippet

snippet reactDanger "React dangerouslySet"
dangerouslySetInnerHTML={{ __html: ${1} }}
endsnippet
# Console.Log
snippet cl "console.log" b
console.log(${1})
endsnippet

snippet ca "console.assert" b
console.assert(${1}, ${2:'Condition'})
endsnippet

snippet ci "console.info" b
console.info(${1})
endsnippet

snippet cw "console.warn" b
console.warn(${1})
endsnippet

snippet cd "console.debug" b
console.debug(${1})
endsnippet

snippet cc "console.count" b
console.count(${1})
endsnippet

snippet ct "console.table" b
console.table(${1}${2:,${3:['Optional column to show']}})
endsnippet

snippet cti "console.time" b
console.time(${1})
${0:${VISUAL}}
console.timeEnd($1)
endsnippet

snippet cg "console.group" b
console.group(${1})
cosnole.log(${2})$3
console.groupEnd()$0
endsnippet

# JSDoc

snippet ** "docblock" b
/**
${VISUAL:/((?m)^)/ * /g}$0
*/
endsnippet

snippet par "@param {...}"
@param {${1:type}} ${0:name description}
endsnippet

snippet ret "@return {...}"
@return {${1:type}} ${0}
endsnippet


# Misc

snippet fl "flow" b
// @flow
endsnippet

snippet "(use|strict)" "'use strict' declaration" br
'use strict';
endsnippet

snippet jsc "JSX Comment"
{/* ${0:${VISUAL}} */}
endsnippet

# Jest

snippet describe "describe" b
describe('${1}', () => {
${0:${VISUAL}}
})
endsnippet

snippet it "it" b
it('${1}', () => {
${0:${VISUAL}}
})
endsnippet

snippet expect "expect" b
expect(${1}).to${2}(${3})
endsnippet

snippet esl "eslint comment"
// eslint-disable${1:-next-line} ${2:no-debugger}
${0:debugger}
endsnippet

# vim:ft=snippets:
