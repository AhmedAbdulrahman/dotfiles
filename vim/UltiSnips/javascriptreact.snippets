snippet imr "import React from 'react'" b
import * as React from 'react';
endsnippet

# Hooks
snippet useState "React useState" b
const [${1}, set${2}] = React.useState(${3});${0}
endsnippet

snippet useEffect "React useEffect" b
React.useEffect(() => {
	${1}
	return () => {}
}, [${2}]);${0}
endsnippet

snippet useContext "React useContext hook" b
const {$1} = React.useContext($2);
endsnippet

snippet useRef "React useRef() hook" b
const $1 = React.useRef($2);
endsnippet

# Class Components LifeCycle
snippet ctor "constructor()" b
  constructor(props) {
  super(props)
  $0
}
endsnippet

# Mounting
snippet getDerivedState "Mounting: static getDerivedStateFromProps(nextProps, prevState)" b
static getDerivedStateFromProps(nextProps, prevState) {
$0
}
endsnippet

snippet compDid "Mounting: componentDidMount()" b
componentDidMount() {
$0
}
endsnippet

snippet render "Mounting: render()" b
render() {
	const {$0} = this.state
	const {$1} = this.props

	return (
		$3
	)
}
endsnippet

# Unmounting
snippet compUn "componentWillUnmount" b
componentWillUnmount() {
$0
}
endsnippet

# Updating
snippet shouldUp "shouldComponentUpdate" b
shouldComponentUpdate(nextProps, nextState) {
return ${1:true};
}
endsnippet

snippet compUp "componentDidUpdate" b
componentDidUpdate(prevProps, prevState) {
$0
}
endsnippet

snippet getSnapshot "getSnapshotBeforeUpdate" b
getSnapshotBeforeUpdate(prevProps, prevState) {
$0
}
endsnippet

# Error Handling
snippet getDerivedError "Error Handling: getDerivedStateFromError(error)" b
static getDerivedStateFromError(error) {
$0
}
endsnippet

snippet compCatch "Error Handling: componentDidCatch(error, info)" b
componentDidCatch(error, info) {
$0
}
endsnippet

# React Components
snippet rcs "Create React Simple Class"
import * as React from 'react'
class ${1:Component} extends React.Component {
	constructor(props){
		super(props)
		this.state = {}
	}

	render() {
		return (
			<${2:div}>
				${4:children}
			</${2:div}>
		)
	}
}

export default ${1:Component}
endsnippet
snippet rcc "Create React Class"
import * as React from 'react'
import PropTypes from 'prop-types'
import classnames from 'clsx'

class ${1:Component} extends React.Component {
	constructor(props){
		super(props)
		this.state = {}
	}

	render() {
		const {className, children, ...other} = this.props
		return (
			<${2:div}
				className={classnames(className)}
				{...other}
			>
				${4:children}
			</${2:div}>
		)
	}
}

${1:Component}.propTypes = {
	children: PropTypes.node.isRequired,
	classes: PropTypes.object.isRequired,
	className: PropTypes.string,
}

export default ${1:Component}
endsnippet

snippet rcjss "React Class JSS"
import * as React from 'react'
import PropTypes from 'prop-types'
import classnames from 'clsx'
import withStyles from '@material-ui/core/styles/withStyles'

export const styles = theme => ({
	root: {},
})

class ${1:Component} extends React.Component {
	constructor(props){
		super(props)
		this.state = {}
	}

	render() {
		const { children, classes, className, ...other} = this.props

		return (
			<${2:div}
				className={classnames(classes.root, className)}
				{...other}
			>
				${3:children}
			</${2:div}>
		)
	}
}

${1:Component}.propTypes = {
	children: PropTypes.node.isRequired,
	classes: PropTypes.object.isRequired,
	className: PropTypes.string,
}

export default withStyles(styles)(${1:Component})
endsnippet

snippet rfjss "React Functional JSS"
import * as React from 'react'
import PropTypes from 'prop-types'
import classnames from 'clsx'
import withStyles from '@material-ui/core/styles/withStyles'

export const styles = theme => ({
	root: {},
})

const ${1:Component} = React.forwardRef(function ${1:Component}(props, ref) {
	const { children, classes, className, ...other} = props
	return (
		<div
			className={classnames(classes.root, className)}
			ref={ref}
			{...other}
		>
			{children}
		</div>
	);
})

${1:MyComponent}.propTypes = {
	children: PropTypes.node.isRequired,
	classes: PropTypes.object.isRequired,
	className: PropTypes.string,
}

export default withStyles(styles)(${1:MyComponent})
endsnippet

snippet rfc "React Functional Stateless"
import * as React from 'react'
import PropTypes from 'prop-types'
import classnames from 'clsx'

const ${1:Component} = React.forwardRef(function ${1:Component}(props, ref) {
	const { children, className, ...other} = props

	return (
		<${2:div}
			className={classnames(className)}
			ref={ref}
			{...other}
		>
			${4:children}
		</${2:div}>
	)
})

${1:Component}.propTypes = {
	children: PropTypes.node.isRequired,
	className: PropTypes.string,
}

export default ${1:Component}
endsnippet

snippet rfcss "React Functional CSS Modules"
import * as React from 'react'
import PropTypes from 'prop-types'
import classnames from 'clsx'
import styles from './${1}.module.css'

const ${1:Component} = React.forwardRef(function ${1:Component}(props, ref) {
	const { children, className, ...other } = props

	return (
		<${2:div}
			className={classnames(styles.${3:root}, className)}
			ref={ref}
			{...other}
		>
			${4:children}
		</${2:div}>
	)
})

${1:Component}.propTypes = {
	children: PropTypes.node.isRequired,
	className: PropTypes.string,
}

export default ${1:Component}
endsnippet

snippet reactStory "Create React Story"
import React from 'react'
import { storiesOf } from '@storybook/react'
import { text, boolean } from '@storybook/addon-knobs'
import ${1:Button} from './'

const stories = storiesOf('Components/${1:Button}', module)

export const Default = () => (
	<${1:Button}
		disabled={boolean('disabled', false)}
	>
		{text('children', 'Just a ${1:Button}')}
	</${1:Button}>
)

stories.add('Default', Default)

export default Default
endsnippet

snippet reactDanger "React dangerouslySet"
dangerouslySetInnerHTML={{ __html: ${1} }}
endsnippet
