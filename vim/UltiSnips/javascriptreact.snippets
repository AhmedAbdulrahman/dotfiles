snippet useState "React useState" b
const [${1}, set${2}] = React.useState(${3});${0}
endsnippet

snippet useEffect "React useEffect" b
React.useEffect(() => {
	${1},
}, [${2}]);${0}
endsnippet

snippet jsc "JSX Comment"
{/* ${0:${VISUAL}} */}
endsnippet

snippet imm "import npm module" b
import $1 from '$2';$0
endsnippet

snippet imp "import x from x" b
import { $1 } from './$2';$0
endsnippet

snippet imr "import React from 'react'" b
import React from 'react';
endsnippet

snippet ctor "constructor()" b
  constructor(props) {
  super(props)
  $0
}
endsnippet

snippet dse "getDerivedStateFromError" b
static getDerivedStateFromError(${1:error}) {
$0
}
endsnippet

snippet dsp "getDerivedStateFromProps" b
static getDerivedStateFromProps(${1:nextProps}, ${2:prevState}) {
$0
}
endsnippet

snippet sbu "getSnapshotBeforeUpdate" b
getSnapshotBeforeUpdate(${1:prevProps}, ${2:prevState}) {
$0
}
endsnippet

snippet cdc "componentDidCatch" b
componentDidCatch() {
$0
}
endsnippet

snippet cdm "componentDidMount" b
componentDidMount() {
$0
}
endsnippet

snippet cdu "componentDidUpdate" b
componentDidUpdate(prevProps, prevState) {
$0
}
endsnippet

snippet cwum "componentWillUnmount" b
componentWillUnmount() {
$0
}
endsnippet

snippet scu "shouldComponentUpdate" b
shouldComponentUpdate(nextProps, nextState) {
return ${1:true};
}
endsnippet

snippet reactClass "Create React Class"
import React from 'react'
import PropTypes from 'prop-types'
import classnames from 'classnames'

class ${1:MyComponent} extends React.Component {
	render() {
		const {className, children, ...other} = this.props
		return (
			<${2:div}
				className={classnames(styles.${3:root}, className)}
				{...other}
			>
				${4:children}
			</${2:div}>
		)
	}
}

${1:MyComponent}.propTypes = {
	children: PropTypes.node.isRequired,
	classes: PropTypes.object.isRequired,
	className: PropTypes.string,
}

export default ${1:MyComponent}
endsnippet

snippet reactClassJSS "Create React Class JSS"
import React from 'react'
import PropTypes from 'prop-types'
import classnames from 'classnames'
import withStyles from '../styles/withStyles'

export const styles = theme => ({
	root: {},
})

class ${1:MyComponent} extends React.Component {
	render() {
		const { children, classes, className, ...other} = this.props

		return (
			<${2:div}
				className={classnames(classes.root, className)}
				{...other}
			>
				${3:children}
			</${2:div}>
		)
	}
}

${1:MyComponent}.propTypes = {
	children: PropTypes.node.isRequired,
	classes: PropTypes.object.isRequired,
	className: PropTypes.string,
}

export default withStyles(styles)(${1:MyComponent})
endsnippet

snippet reactStatless "Create React Stateless"
import React from 'react'
import PropTypes from 'prop-types'
import classnames from 'classnames'

const ${1:MyComponent} = (props) => {
	const { className, children, ...other } = props

	return (
		<${2:div}
		className={classnames(className)}
		{...other}
		>
		${4:children}
		</${2:div}>
	)
}

${1:MyComponent}.propTypes = {
children: PropTypes.node.isRequired,
className: PropTypes.string,
}

export default ${1:MyComponent}
endsnippet

snippet reactStatlessCSSModules "Create React Stateless CSS Modules"
import React from 'react'
import PropTypes from 'prop-types'
import classnames from 'classnames'
import styles from './${1}.module.css'

const ${1:MyComponent} = props => {
	const { children, className, ...other } = props

	return (
	<${2:div}
		className={classnames(styles.${3:root}, className)}
		{...other}
	>
		${4:children}
	</${2:div}>
	)
}

${1:MyComponent}.propTypes = {
	children: PropTypes.node.isRequired,
	className: PropTypes.string,
}

export default ${1:MyComponent}
endsnippet

snippet reactStory "Create React Story"
import React from 'react'
import { storiesOf } from '@storybook/react'
import { text, boolean } from '@storybook/addon-knobs'
import ${1:Button} from './'

const stories = storiesOf('Components/${1:Button}', module)

export const Default = () => (
	<${1:Button}
		disabled={boolean('disabled', false)}
	>
		{text('children', 'Just a ${1:Button}')}
	</${1:Button}>
)

stories.add('Default', Default)

export default Default
endsnippet

snippet reactDanger "React dangerouslySet"
dangerouslySetInnerHTML={{ __html: ${1} }}
endsnippet

# vim:ft=snippets:

