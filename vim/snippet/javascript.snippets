global !p
from helpers import *
endglobal

snippet pretty "pretty-print JSON-able data" b
console.log(
	JSON.stringify({
		$1
	}, null, 2)
)
endsnippet

# Functions

snippet fun "function with dynamic docblock" bA
`!p snip.rv=jsDoc(t[2])`
function ${1}(${2}) {
	${0:${VISUAL}}
}
endsnippet

snippet iife
((${1:window, document, undefined}) => {
	${0:${VISUAL}}
}(${2:win, doc}))
endsnippet

# Loops

snippet for "for loop" !
for (let ${1:i} = 0, len = ${2:array}.length; $1 < len; $1++) {
	$0${2/([^.]+).*/$1/}[$1]
}
endsnippet

snippet forof "for of loop" b
for (let ${1:value} of ${2:Things}) {
	${0:${VISUAL}}
}
endsnippet

snippet forin "for each loop" b
for (let ${1:key} in ${2:object}) {
	if ($2.hasOwnProperty($1)) {
		${0:let ${3:value} = $2[$1];}
	}
}
endsnippet

# Modules


# Conditionals

snippet if "if" b
if (${1}) {
	${0:${VISUAL}}
}
endsnippet

snippet el "else"
else {
	${0:${VISUAL}}
}
endsnippet

snippet eif "else if" !
else if (${1}) {
	${0:${VISUAL}}
}
endsnippet


# Switches

snippet sw "switch" b
switch (${1}) {
	${0:${VISUAL}}
}
endsnippet

snippet case "case" b
case ${1}:
	${0:${VISUAL}}
	break;
endsnippet

# React
snippet ctor "constructor()" b
constructor(props) {
	super(props)
	$0
}
endsnippet

snippet dse "getDerivedStateFromError" b
static getDerivedStateFromError(${1:error}) {
	$0
}
endsnippet

snippet dsp "getDerivedStateFromProps" b
static getDerivedStateFromProps(${1:nextProps}, ${2:prevState}) {
	$0
}
endsnippet

snippet sbu "getSnapshotBeforeUpdate" b
getSnapshotBeforeUpdate(${1:prevProps}, ${2:prevState}) {
	$0
}
endsnippet

snippet cdc "componentDidCatch" b
componentDidCatch() {
	$0
}
endsnippet

snippet cdm "componentDidMount" b
componentDidMount() {
	$0
}
endsnippet

snippet cdu "componentDidUpdate" b
componentDidUpdate(prevProps, prevState) {
	$0
}
endsnippet

snippet cwum "componentWillUnmount" b
componentWillUnmount() {
	$0
}
endsnippet

snippet scu "shouldComponentUpdate" b
shouldComponentUpdate(nextProps, nextState) {
	return ${1:true};
}
endsnippet

# Console.Log
snippet cl "console.log" b
console.log(${1})
endsnippet

snippet ca "console.assert" b
console.assert(${1}, ${2:'Condition'})
endsnippet

snippet ci "console.info" b
console.info(${1})
endsnippet

snippet cw "console.warn" b
console.warn(${1})
endsnippet

snippet cd "console.debug" b
console.debug(${1})
endsnippet

snippet cc "console.count" b
console.count(${1})
endsnippet

snippet ct "console.table" b
console.table(${1}${2:,${3:['Optional column to show']}})
endsnippet

snippet cti "console.time" b
console.time(${1})
${0:${VISUAL}}
console.timeEnd($1)
endsnippet

snippet cg "console.group" b
console.group(${1})
cosnole.log(${2})$3
console.groupEnd()$0
endsnippet

# JSDoc

snippet ** "docblock" b
/**
${VISUAL:/((?m)^)/ * /g}$0
*/
endsnippet

snippet par "@param {...}"
@param {${1:type}} ${0:name description}
endsnippet

snippet ret "@return {...}"
@return {${1:type}} ${0}
endsnippet


# Misc

snippet fl "flow" b
// @flow
endsnippet

snippet "(use|strict)" "'use strict' declaration" br
'use strict';
endsnippet

snippet jsc "JSX Comment"
{/* ${0:${VISUAL}} */}
endsnippet

# Jest

snippet describe "describe" b
describe('${1}', () => {
	${0:${VISUAL}}
})
endsnippet

snippet it "it" b
it('${1}', () => {
	${0:${VISUAL}}
})
endsnippet

snippet expect "expect" b
expect(${1}).to${2}(${3})
endsnippet

snippet esl "eslint comment"
// eslint-disable${1:-next-line} ${2:no-debugger}
${0:debugger}
endsnippet

# vim:ft=snippets:
