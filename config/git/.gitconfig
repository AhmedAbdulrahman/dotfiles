
; vim: ft=gitconfig

[user]
	useconfigonly=true

# use separate file for username / github token / etc
[include]
	path = ~/.gitconfig.local

[commit]
  verbose = true

[alias]
	# branch
	br = branch --sort=-committerdate --verbose --format='%(HEAD) %(color:red)%(objectname:short)%(color:reset) - %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) - %(color:green)(%(committerdate:relative))%(color:reset) %(color:blue)<%(authorname)>%(color:reset)'
	brs = br -a
	co = checkout
	cb = checkout -b
	# commit
	amend = commit --amend --no-edit
	cm = commit
	# diff
	d = diff --patch-with-stat
	dc = d --staged
	dm = d --word-diff-regex=.
	doctor = remote -v show origin
	stat = --no-pager diff --stat

	fl = l -u
	grr = grep --break --heading --line-number
	hide = update-index --assume-unchanged
	unhide = update-index --no-assume-unchanged
	hidden = !git ls-files -v | grep \"^[a-z]\"
	# list
	la = l --all --simplify-by-decoration
	lastchange = log -p --follow -n 1
	ll = log --cc
	lnm = l --no-merges

	cherry = cherry-pick
	
	cp = cherry-pick
	addall = !sh -c 'git add . && git add -u'
	ign = ls-files -o -i --exclude-standard	# Show files ignored by git
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"	# Show the diff between the latest commit and the current state

	reup = rebase-update # depot_tools specific
	git = !exec git
	rb = "!sh -c \"git rebase -i HEAD~$1\" -"
	recentall = for-each-ref --count=10 --sort=-committerdate --format='%(committerdate:short) %(refname:short) [%(committername)]'
	recentlocal = for-each-ref --count=10 --sort=-committerdate refs/heads/ --format='%(committerdate:short) %(refname:short) [%(committername)]'

	patch = !git --no-pager diff --no-color | pbcopy | echo "Patch copied to clipboard"
	st = status -sb
	stashes = stash list
	# push
	force = push --force-with-lease
	track = push origin -u HEAD

	undo = reset --soft HEAD^
	who = shortlog -sne
	wt = whatchanged --pretty=format:\"%C(blue)%h %Creset- %C(green)(%cr) %C(cyan)<%aN> %Creset%aE %C(magenta)%d %n %C(yellow)%s %n%Creset\" --date=auto:human
	unpushed-branches = log --branches --not --remotes --no-walk --decorate --oneline
	# utils
	# Rename branch name local & remote. Usage: $ git rename old_branch new_branch, and it's done.
	rename = "!change() { git branch -m $1 $2; git push origin :$1; git push --set-upstream origin $2; }; change" 
	# list commited files name, Usage: $ git cf <COMMIT_ID>
	cf = "!show_commited_files() { git diff-tree --no-commit-id --name-only -r $1; }; show_commited_files"  


[core]
	editor = $EDITOR
	commitGraph = true
	whitespace=fix,space-before-tab,tab-in-indent,trailing-space,cr-at-eol
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	untrackedCache = true
	pager = delta --dark --hunk-style plain --theme OneHalfDark
	commentChar = %

[branch]
  autosetupmerge = always
  autosetuprebase = always

[branch "master"]
  rebase = true

[fetch]
  prune = true
  fsckObjects = true

# [pager]
# 	# insanely beautiful diffs ==> npm install -g diff-so-fancy
# 	diff = diff-so-fancy | less --tabs=4 -RFX
# 	show = diff-so-fancy | less --tabs=4 -RFX

# [interactive]
  # disabled until github.com/so-fancy/diff-so-fancy/pull/172 is resolved :(
	# diffFilter = "diff-so-fancy"

# so much color
[color]
	ui = auto

[color "diff"]
	meta = 238 italic
	frag = 240
	old = red strike
	new = green italic
	whitespace = red reverse
	commit = yellow bold

[color "diff-highlight"]
	oldNormal = red strike
	oldHighlight = red strike 52
	newNormal = green italic
	newHighlight = green italic 22

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "status"]
	added = green
	changed = yellow
	untracked = red

# git mergetool
[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = 1000
  tool = vimdiff
  conflictstyle = diff3

[mergetool]
  trustExitCode = true
  keepBackup = false
  prompt = false

[mergetool "vimdiff"]
  cmd = $EDITOR -d $LOCAL $BASE $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'

# URL shorthands
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
  insteadOf = "github:"

[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
  insteadOf = "gist:"

[url "git@gitlab.com:"]
  insteadOf = gl:
  pushInsteadOf = gitlab:
  pushInsteadOf = git://gitlab.com/

[url "git://gitlab.com/"]
  insteadOf = gitlab:

[url "git@bitbucket.org:"]
  insteadOf = bb:
  pushInsteadOf = bitbucket:
  pushInsteadOf = git://bitbucket.org/

[url "git://bitbucket.org/"]
  insteadOf = bitbucket:

# correct typos
[help]
	autocorrect = 1

# push easily. http://stackoverflow.com/a/23918418/89484
[push]
	default = current
	followTags = true

[pull]
  rebase = true

[fetch]
	prune = true

[rebase]
  autosquash = true
  instructionFormat = [%cn <%ce> %G?] %s
  autoStash = true

[filter "media"]
  clean = git-media-clean %f
  smudge = git-media-smudge %f

[receive]
  fsckObjects = true

[diff]
	compactionHeuristic = true
	# Show blocks of moved text of at least 20 alphanumeric characters differently than adds/deletes
	# https://blog.github.com/2018-04-05-git-217-released/
	colorMoved = zebra
	# Detect copies as well as renames
	renames = copies
	algorithm = histogram
	tool = vimdiff
	indentHeuristic = true

[difftool]
  prompt = false
  trustExitCode = true

[diff "exif"]
  textconv = exiftool

[diff "plist"]
  textconv = plutil -convert xml1 -o -

[difftool "vimdiff"]
  cmd = $EDITOR -d $LOCAL $REMOTE

[stash]
	showPatch = true

[log]
  decorate = short
  date = local

[status]
  submodulesummary = true
  color = true

[submodule]
  recurse = true

[tag]
  forceSignAnnotated = true

[apply]
  whitespace = nowarn

[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true

[protocol "keybase"]
  allow = always