#  vim: set ts=4 sw=4 tw=80 ft=zsh et :
# Fuzzy Stash management

if is-true "$(git rev-parse --is-inside-work-tree >/dev/null)"; then
  print "$0: not a repository work tree: $PWD" >&2
  return 1
fi

unalias stash 2> /dev/null

local cmd opts out reflog_selector selection query
cmd="git stash show --patience --stat --pretty=oneline -p \$(echo {} | cut -d: -f1) --color=always --ext-diff $forgit_fancy"
opts="
    $FZF_DEFAULT_OPTS \
    +s +m -0 --tiebreak=index --preview=\"$cmd\" \
    --header='Press CTRL-b: To Checkout, CTRL-y: To Apply, CTRL-x: To Drop' \
    --print-query --query="$query" \
    --bind ctrl-u:half-page-up \
    --bind ctrl-d:half-page-down \
    --expect=ctrl-b,enter,ctrl-x \
"
while out=$(git stash list "$@" | FZF_DEFAULT_OPTS="$opts" fzf)
do
    # Tokenize selection by newline
    selection=("${(f)out}")

    # Keep the query accross fzf calls
    query="$selection[1]"

    # Represents the stash, e.g. stash{1}
    reflog_selector=$(echo "$selection[3]" | cut -d ':' -f 1)

    case "$selection[2]" in
        # ctrl-b checks out the stash as a branch and removes the stash 
        ctrl-b)
            sha=$(echo "$selection[3]" | grep -o '[a-f0-9]\{7\}')
            git stash branch "stash-$sha" "$reflog_selector"
            break
            ;;
        # enter will apply the stash
        enter) 
            git stash apply $reflog_selector
            break
            ;;
        # ctrl-x will drop the stash
        ctrl-x) 
            git stash drop $reflog_selector --quiet
            ;;
    esac
done