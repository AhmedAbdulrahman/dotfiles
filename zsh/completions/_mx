#compdef mx

# vim:ft=zsh:

# mx completion
# --------------------------------------------------------------------------------------------------

# Description
# -----------
# An auto-complete function for my mx needs.
# --------------------------------------------------------------------------------------------------
# Authors
# -------
# Filipe Kiss <eu@filipekiss.com.br> http://github.com/filipekiss
# --------------------------------------------------------------------------------------------------

_mx() {
    local state line args
    typeset -A opt_args

    # command options
    args=(
        "--no-focus[Do not attach/swtich to session]"
        "--pwd=[Specify the folder to be used for the session]: :_files -/"
    )

    #
    args+=(
    "(-): :->namespace-or-external"
    "(-)*:: :->project-or-options"
    )

    _arguments -C $args

    case $state in
        (namespace-or-external)
            __mx_sessions
            __mx_namespace
            __mx_get_subcommands
            ;;
        (project-or-options)
            __mx_projects
            ;;
    esac
}

__mx_get_subcommands() {
    local namespaces
    typeset -a _description
    _all_cmds=(${(k)commands[(I)(#i)mx-*]})
    _description '' expl '' # get applicable matchers
    compadd "$expl[@]" -O allmatching -a _all_cmds
    len=${#${(O)allmatching//?/.}[1]} # length of longest match
    sep="--"
    for command in ${_all_cmds[@]}; do
        _local_command="${command/mx-/}"
        commands_m+=("${_local_command}")
        commands_d+=("${(r.len-3.)_local_command} -- External Command")
    done;
    alts+=("external-commands:External Commands:compadd -ld commands_d -a commands_m")
    _alternative $alts
}

__mx_sessions() {
    local sessions _description
    _description=()
    _description=("${(@f)$(_list_available_sessions)}")
    [[ -z $_description ]] && return 0
    _describe -t sessions "Open Sessions" _description && ret=0
    return $ret
}

__mx_namespace() {
    local namespaces _description
    _description=()
    [[ -n $DOTFILES ]] && _description=("dotfiles:$DOTFILES") || typeset -a _description
    _description+=($(_list_available_namespaces))
    _describe -t namespace "Namespaces" _description && ret=0
    return $ret
}

__mx_projects() {
    local command=$words[1]
    local completion_func="_mx_${command//-/_}"
    if [[ -n  ${(k)functions[(I)(#i)${completion_func}]} ]]; then
        _is_external="yes"
        _call_function ret "${completion_func}" && return ret
    else
        [[ $words[1] == "dotfiles" ]] && return 0
        _description=("${(@f)$(_list_available_projects $words[1])}")
        _describe -t project "Listing projects | ${words[1]}" _description && ret=0
    fi
    return $ret
}


_fzf_complete_mx() {
    local words state
    # Convert string to array, just like the $words we use for the zsh completion
    words=(${=@})
    state="command"
    [[ ${#words[@]} == "1" ]] && state="namespace"
    [[ ${#words[@]} == "2" ]] && state="project"
    case $state in
        (namespace)
            __fzf_complete_mx_namespace "${words} "
            ;;
        (project)
            __fzf_complete_mx_project "${words} " $words[2]
            ;;
    esac
}

__fzf_complete_mx_namespace(){
    _fzf_complete "--reverse --no-multi --header-lines=1" "$@" < <(
        echo "Project Namespace"
        _list_available_namespaces |
            cut -d ':' -f1
    )
}


__fzf_complete_mx_project(){
    _fzf_complete "--reverse --no-multi --header-lines=1" "$@" < <(
        echo "Select Project for $2"
        _list_available_projects "$2" |
            cut -d ':' -f1
    )
}

_list_available_sessions() {
    _description=()
    _sessions=(${(f)"$(tmux list-sessions -F '#{session_name}' 2>/dev/null)"})
    if [[ -n "$TMUX" ]]; then
        local current_session
        current_session=$(tmux display-message -p '#S')
    fi
    for session in $_sessions; do
        [[ $session != \_* ]] && [[ $session != ${current_session:-} ]] && _description+=("${session}:→ Go to session ${session}")
    done;
    echo ${(iF)_description}
}

_list_available_namespaces() {
    local home_namespaces project_namespaces _description
    _description=()
    [[ -z $PROJECTS ]] && PROJECTS=$HOME

    if [[ -n $PROJECTS ]]; then
        project_namespaces=($(find ${PROJECTS}/* -maxdepth 0 -type d -not -path '*/\.*' -not -iwholename '*/_Fork' -printf '%f\n'))
        if [[ -d "${PROJECTS}/_Fork" ]]; then
            [[ -n $project_namespaces ]] && _excluded_from_forks="-not -iwholename '*/${(j:' -not -iwholename '*\/:)project_namespaces}'"
            forks_namespaces=($(eval "find ${PROJECTS}/_Fork/* -maxdepth 0 -type d ${_excluded_from_forks:-} -not -path '*/\.*' -printf '%f\n'"))
        fi
        for namespace in $project_namespaces; do
            _description+=("${namespace}:${PROJECTS}/${namespace}")
        done;
        for namespace in $forks_namespaces; do
            _description+=("${namespace}:${PROJECTS}/_Fork/${namespace}")
        done;
    fi

    echo ${(iF)_description}
}

_list_available_projects() {
    local _selected_namespace _description
    _selected_namespace="$1"
    typeset -a _description
    if [[ -d ${PROJECTS}/${_selected_namespace} ]]; then
        _projects_available=($(find ${PROJECTS}/${_selected_namespace}/* -maxdepth 0 -type d))
    fi
    if [[ -d ${PROJECTS}/_Fork/${_selected_namespace} ]]; then
        _projects_available+=($(find ${PROJECTS}/_Fork/${_selected_namespace}/* -maxdepth 0 -type d))
    fi
    for project in $_projects_available; do
        _session_description="${project/#${HOME}/~}"
        if tmux has-session -t "${_selected_namespace}/${project:t}" > /dev/null 2>&1; then
            _session_description="→ Go to session ${_selected_namespace}/${project:t}"
        fi
        echo "${project:t}:${_session_description}"
    done;
}

_get_project_path() {
    local NAMESPACE_PATH _selected_namespace
    _selected_namespace="$1"
    [[ -d ${PROJECTS}/${_selected_namespace} ]] && NAMESPACE_PATH=${PROJECTS}/${_selected_namespace} || NAMESPACE_PATH=${HOME}/${_selected_namespace}
    echo $NAMESPACE_PATH
}

_mx "$@"