#!/usr/bin/env zsh

# Do not override files using `>`, but it's still possible using `>!`
set -o noclobber

# True color
export COLORTERM=truecolor

# ---------------------------------------------
# Environment
# ---------------------------------------------

path=(
  /usr/local/bin
	/usr/local/sbin
	/usr/bin
	/bin
	/usr/sbin
	/sbin
	~/.local/bin
  /.cabal/bin
  /.cargo/bin
  /.rbenv/bin
  /.rvm/bin
  /.composer/vendor/bin
  /.npm-global/bin
  /.config/yarn/global/node_modules/.bin
  /usr/local/opt/ruby/bin
  $ZPLUG_BIN
  $path
)

# Export path to root of dotfiles repo
export DOTFILES=${DOTFILES:="$HOME/dotfiles"}

# SSH
export SSH_KEY_PATH="$HOME/.ssh/id_rsa"

# Linuxbrew PATH
if [[ "$OSNAME" == 'Linux' ]]; then
  export PATH="$HOME/.linuxbrew/bin:$PATH"
  export MANPATH="$HOME/.linuxbrew/share/man:$MANPATH"
  export INFOPATH="$HOME/.linuxbrew/share/info:$INFOPATH"
  export PKG_CONFIG_PATH="/usr/share/pkgconfig:$PKG_CONFIG_PATH"
fi

# nvm
export NVM_DIR="$HOME/.nvm"
export NVM_LAZY_LOAD=true
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" --no-use  # This loads nvm

# For pyenv
export PATH="/usr/local/opt/python/libexec/bin:$PATH"
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PATH:$PYENV_ROOT/bin"
export PYTHON_CONFIGURE_OPTS="--enable-shared"

# GEM
export PATH="$PATH:$(ruby -e 'puts Gem.bindir')"

export ANDROID_HOME="/Users/$USER/Library/Android/sdk"
export PATH="${PATH}:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools"

# For bat
export BAT_CONFIG_PATH="$HOME/.config/bat/config"

# Homebrew
export HOMEBREW_INSTALL_BADGE="⚽️"
export HOMEBREW_NO_ANALYTICS=1
export HOMEBREW_FORCE_BREWED_GIT=1

export EXA_COLORS="uu=38;5;249:un=38;5;241:gu=38;5;245:gn=38;5;241:da=38;5;245:sn=38;5;7:sb=38;5;7:ur=38;5;3;1:uw=38;5;5;1:ux=38;5;1;1:ue=38;5;1;1:gr=38;5;3:gw=38;5;5:gx=38;5;1:tr=38;5;3:tw=38;5;1:tx=38;5;1:di=38;5;12:ex=38;5;7;1:*.md=38;5;229;4:*.png=38;5;208:*.jpg=38;5;208:*.gif=38;5;208"

export TERM='xterm-256color'

export READER="zathura"
export PATH="/usr/local/bin/w3m:$PATH"
# ---------------------------------------------
# Locale : LANGUAGE must be set by en_US
# ---------------------------------------------
export LANGUAGE="en_US.UTF-8"
export LANG="${LANGUAGE}"
export LC_ALL="${LANGUAGE}"
export LC_CTYPE="${LANGUAGE}"

# ---------------------------------------------
# Default Terminal Editor
# ---------------------------------------------

# Default Editor
export EDITOR='nvim'
export CVSEDITOR=$EDITOR
export GIT_EDITOR=$EDITOR

# For GUI
export VISUAL=$EDITOR

# Default editor for local and remote sessions
if [[ -n "$SSH_CONNECTION" ]]; then
  # on the server
  if [ command -v vim >/dev/null 2>&1 ]; then
    export EDITOR='vim'
  else
    export EDITOR='vi'
  fi
else
  export EDITOR='vim'
fi


# ---------------------------------------------
# Config
# ---------------------------------------------

# Less
#export LESS="-R -f -F -X -i -P ?f%f:(stdin). ?lb%lb?L/%L.. [?eEOF:?pb%pb\%..]"
# less
export LESS=" \
	--ignore-case \
	--tilde \
	--chop-long-lines \
	--status-column \
	--LONG-PROMPT \
	--jump-target=10 \
	--RAW-CONTROL-CHARS \
	--clear-screen \
	--silent \
	--tabs=4 \
	--shift=5"
export LESSOPEN="| bat %s 2>/dev/null" # Use `bat` program to syntax-wise highlight files.
export LESSHISTFILE="$HOME/.config/less/lesshistory" # Command and search history file.
export LESSKEYRC="$HOME/.config/less/lesskey" # Path of the uncompiled lesskey file.
export LESSKEY="$LESSKEYRC.lwc" # Path of the compiled lesskey file.
export LESS_TERMCAP_md=$'\e[01;34m' # Turn on bold mode.
export LESS_TERMCAP_me=$'\e[0m' # Turn off all attributes.
export LESS_TERMCAP_mh=$'\e[2m' # Turn on dim mode.
export LESS_TERMCAP_mr=$'\e[7m' # Turn on reverse mode.
export LESS_TERMCAP_se=$'\e[27;0m' # Exit standout mode.
export LESS_TERMCAP_so=$'\e[1;33m' # Begin standout mode.
export LESS_TERMCAP_ue=$'\e[24;0m' # Exit underline mode.
export LESS_TERMCAP_us=$'\e[4;1;38;5;250m' # Begin underline mode.

# Pager
export PAGER="${commands[less]:-$PAGER}"

#  History {{{
typeset -g HISTFILE="$HOME/.zsh_history" # Where history logs are stored.
typeset -g HISTSIZE=10000000 # The maximum number of events stored in the internal history list.
typeset -g SAVEHIST=$HISTSIZE # The maximum number of history events to save in the history file.
setopt EXTENDED_HISTORY # Save each command's epoch timestamps and the duration in seconds.
setopt HIST_EXPIRE_DUPS_FIRST # Expire duplicate entries first when trimming history.
setopt HIST_FIND_NO_DUPS # Don't display a line previously found.
setopt HIST_IGNORE_ALL_DUPS # Delete old recorded entry if new entry is a duplicate.
setopt HIST_IGNORE_DUPS # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_SPACE # Don't record an entry starting with a space.
setopt HIST_REDUCE_BLANKS # Remove superfluous blanks before recording an entry.
setopt HIST_SAVE_NO_DUPS # Don't write duplicate entries in the history file.
setopt HIST_VERIFY # Don't execute the line directly instead perform history expansion.
setopt INC_APPEND_HISTORY # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY # Share history between all sessions.
setopt HIST_BEEP                     # Beep when accessing nonexistent history.
# Do not add in root
[[ "$UID" == 0 ]] && unset HISTFILE && SAVEHIST=0
#  }}} History

# Word split
export WORDCHARS=''

# Custom zsh completions path
fpath=($fpath ~/.zsh_completions)

#  FZF {{{
export VIM_FZF_LOG=$(git config --get alias.l 2>/dev/null | awk '{$1=""; print $0;}' | tr -d '\r')

FZF_FILE_HIGHLIGHTER='cat'
(( $+commands[rougify]   )) && FZF_FILE_HIGHLIGHTER='rougify'
(( $+commands[coderay]   )) && FZF_FILE_HIGHLIGHTER='coderay'
(( $+commands[highlight] )) && FZF_FILE_HIGHLIGHTER='highlight -lO ansi'
(( $+commands[bat]       )) && FZF_FILE_HIGHLIGHTER='bat --color=always'
export FZF_FILE_HIGHLIGHTER

FZF_DIR_HIGHLIGHTER='ls -l --color=always'
(( $+commands[tree] )) && FZF_DIR_HIGHLIGHTER='tree -CtrL2'
(( $+commands[exa]  )) && FZF_DIR_HIGHLIGHTER='exa --color=always -TL2'
export FZF_DIR_HIGHLIGHTER

(( $+commands[iconful] )) && FZF_PATH_LOC='2..' || FZF_PATH_LOC=''
export FZF_PATH_LOC

# FZF: default
(( $+commands[ag] )) && FZF_DEFAULT_COMMAND='rg --files --no-messages --no-ignore-vcs --hidden --follow --smart-case --glob "!.git/*" --glob "!node_modules/*" 2>/dev/null'
(( $+commands[fd] )) && FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude ".git/*" --exclude "node_modules/*" 2>/dev/null'
export FZF_DEFAULT_COMMAND
FZF_DEFAULT_OPTS="
--border
--height 90%
--extended
--ansi
--reverse
--cycle
--bind alt-p:preview-up,alt-n:preview-down
--bind ctrl-u:half-page-up
--bind ctrl-d:half-page-down
--bind alt-a:select-all,ctrl-r:toggle-all
--bind ctrl-s:toggle-sort
--bind ?:toggle-preview,alt-w:toggle-preview-wrap
--bind \"ctrl-y:execute-silent(ruby -e 'puts ARGV' {+} | pbcopy)+abort\"
--bind 'alt-e:execute($EDITOR {} >/dev/tty </dev/tty)'
--preview \"($FZF_FILE_HIGHLIGHTER {} || $FZF_DIR_HIGHLIGHTER {}) 2>/dev/null | head -200\"
--preview-window right:50%:hidden
"
export FZF_DEFAULT_OPTS

# FZF: Ctrl - T
FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
(( $+commands[iconful] )) && FZF_CTRL_T_COMMAND="$FZF_CTRL_T_COMMAND | iconful -f"
export FZF_CTRL_T_COMMAND
FZF_CTRL_T_OPTS="
--preview \"($FZF_FILE_HIGHLIGHTER {$FZF_PATH_LOC} || $FZF_DIR_HIGHLIGHTER {$FZF_PATH_LOC}) 2>/dev/null | head -200\"
--bind 'enter:execute(echo {$FZF_PATH_LOC})+abort'
--bind 'alt-e:execute($EDITOR {$FZF_PATH_LOC} >/dev/tty </dev/tty)'
--bind \"ctrl-y:execute-silent(ruby -e 'puts ARGV' {+$FZF_PATH_LOC} | pbcopy)+abort\"
--preview-window right:65%
"
export FZF_CTRL_T_OPTS

# FZF: Ctrl - R
FZF_CTRL_R_OPTS="
--preview 'echo {}'
--preview-window 'down:2:wrap'
--bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'
--header 'Press CTRL-Y to copy command into clipboard'
--exact
--expect=ctrl-x
"
export FZF_CTRL_R_OPTS

# FZF: Alt - C
FZF_ALT_C_COMMAND="command find -L . -mindepth 1 \
    \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) \
    -prune -o -type d -print 2> /dev/null | cut -b3-"
(( $+commands[fd]      )) && FZF_ALT_C_COMMAND='fd --type d --hidden --follow --exclude ".git/*" --exclude "node_modules/*" 2>/dev/null'
(( $+commands[blsd]    )) && FZF_ALT_C_COMMAND='blsd $dir | grep -v "^\.$"'
(( $+commands[iconful] )) && FZF_ALT_C_COMMAND="$FZF_ALT_C_COMMAND | iconful -d"
export FZF_ALT_C_COMMAND
export FZF_ALT_C_OPTS="
--exit-0
--bind 'enter:execute(echo {$FZF_PATH_LOC})+abort'
--preview '($FZF_DIR_HIGHLIGHTER {$FZF_PATH_LOC}) | head -200 2>/dev/null'
--preview-window=right:50%
"

# FZF: Alt - E
FZF_ALT_E_COMMAND="$FZF_DEFAULT_COMMAND"
(( $+commands[iconful] )) && FZF_ALT_E_COMMAND="$FZF_ALT_E_COMMAND | iconful -f"
export FZF_ALT_E_COMMAND
FZF_ALT_E_OPTS="
--preview \"($FZF_FILE_HIGHLIGHTER {$FZF_PATH_LOC} || $FZF_DIR_HIGHLIGHTER {$FZF_PATH_LOC}) 2>/dev/null | head -200\"
--bind 'alt-e:execute($EDITOR {$FZF_PATH_LOC} >/dev/tty </dev/tty)'
--bind \"ctrl-y:execute-silent(ruby -e 'puts ARGV' {+$FZF_PATH_LOC} | pbcopy)+abort\"
--preview-window right:50%
"
export FZF_ALT_E_OPTS
#  }}} FZF