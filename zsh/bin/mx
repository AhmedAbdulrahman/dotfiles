#!/usr/bin/env zsh

# mx is a tmux start script to keep things organized

# Based on the original script by
# -------------------------------
# Wynn Netherland - https://github.com/pengwynn
# Adam Jahnke - https://github.com/adamyonk

set -e
# source dotfiles "source"
echo 'Ahmed'
# _parse_arguments() {
#     local arg
#     local arg_idx
#     arg_idx=0
#     while (($# > 0)); do
#         arg="$1"
#         case "$arg" in
#         --no-focus)
#             _focus="no"
#             ;;
#         --pwd=*)
#             _pwd=$(echo "$arg" | cut -d '=' -f2)
#             ;;
#         --pwd)
#             _pwd=$2
#             shift
#             ;;
#         --* | -*)
#             shift
#             ;;
#         *)
#             _try_mx_command "$arg" "$@"
#             arg_idx=$((arg_idx + 1))
#             [[ $arg_idx -eq 1 ]] && _namespace="${arg}"
#             [[ $arg_idx -eq 2 ]] && _project_name="${arg}"
#             ;;
#         esac
#         shift
#     done
#     return 0
# }

# _try_mx_command() {
#     local _try_command="mx-$arg"
#     if [[ -n $(type -p $_try_command) ]]; then
#         shift
#         shift
#         exec "$_try_command" "$@"
#         exit 0
#     fi
# }

# _parse_arguments "$@"

# _use_default_session_name() {
#     SESSION="${PWD##*/}"
#     NAMESPACE="${SESSION}"
# }

# if [[ -z ${_namespace} ]]; then
#     _use_default_session_name
# else
#     SESSION="${_namespace}"
#     NAMESPACE="${_namespace}"
# fi

# # tmux 1.9a+ doesn't like .'s in session names
# SESSION="${SESSION//./}"
# [[ "$SESSION" == *'dotfiles'* || "$PWD" == *'dotfiles'* ]] && SESSION='dotfiles'

# if [[ -n "${_project_name}" && -z $MX_UNIQUE_SESSIONS ]]; then
#     PROJECT_NAME="${_project_name}"
#     SESSION="${SESSION}/${PROJECT_NAME//./}"
# fi

# if ! (tmux has-session -t "${SESSION}" >/dev/null 2>&1); then
#     WORKINGDIR="${_pwd:-$PWD}"

#     twidth=$(tput cols)
#     theight=$(tput lines)

#     # If running this from inside a tmux session, use tmux total width instead of current pane
#     # width, which is what tput will provide
#     if [[ -n $TMUX ]]; then
#         twidth=$(tmux display-message -p '#{window_width}')
#         theight=$(tmux display-message -p '#{window_height}')
#     fi

#     if [[ "$SESSION" == 'dotfiles' && -d "$HOME/dotfiles" ]]; then
#         e_info "Using dotfiles settings"
#         WORKINGDIR="${HOME}/dotfiles"
#     elif [ -d "${PROJECTS}/oakwood/${NAMESPACE}/${PROJECT_NAME}" ]; then
#         e_info "Found fork at ${PROJECTS}/oakwood/${NAMESPACE}/${PROJECT_NAME}"
#         WORKINGDIR="${PROJECTS}/oakwood/${NAMESPACE}/${PROJECT_NAME}"
#     elif [ -d "${PROJECTS}/${NAMESPACE}/$PROJECT_NAME" ]; then
#         e_info "Found project at ${HOME}/${NAMESPACE}/$PROJECT_NAME"
#         WORKINGDIR="${PROJECTS}/${NAMESPACE}/$PROJECT_NAME"
#     else
#         e_info "Using directory: $WORKINGDIR"
#     fi

#     # Expand possible ~ in variable if user pass --pwd option
#     WORKINGDIR="${WORKINGDIR/#\~/$HOME}"

#     tmux new-session -s "$SESSION" -n editor -d -c $WORKINGDIR -x $twidth -y $theight
#     if [[ -x "${WORKINGDIR}/.mx-start" ]]; then
#         tmux send-keys -t "$SESSION" "./.mx-start" C-m
#     else
#         # The default configuration for my workspace is as follows:
#         # If the total width is below 120 columns wide, a window with no splits is open
#         # If the total width is between 120 and 200, a 50/50 split is made
#         # If the total width is larger than 200, set the right column to be 80 columns and the left
#         # column will take as many columns as possible
#         if [[ $twidth -ge 200 ]]; then
#             SPLIT_ARGS="-h -l 80"
#         elif [[ $twidth -ge 120 ]]; then
#             SPLIT_ARGS="-h -p 50"
#         fi

#         tmux send-keys -t "$SESSION" "e" C-m
#         if [[ -n $SPLIT_ARGS ]]; then
#             tmux split-window $SPLIT_ARGS -c "$WORKINGDIR" -t "$SESSION"
#         fi
#         tmux new-window -d -n 'shell' -t "$SESSION" -c $WORKINGDIR
#         tmux select-window -t 1
#         tmux select-pane -t 1
#     fi
# fi

# if [[ -n $MX_BG || "${_focus:-yes}" == "no" ]]; then
#     exit 0
# fi

# if [ -z "$TMUX" ]; then
#     tmux attach -t "$SESSION"
# else
#     tmux switch-client -t "$SESSION"
# fi