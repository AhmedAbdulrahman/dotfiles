#!/usr/bin/env bash

# mx
# --------------------------------------------------------------------------------------------------
#
# Description
# -----------
# mx is a tmux start script to keep things organized
# --------------------------------------------------------------------------------------------------
#
# Contributors
# ------------
# Filipe Kiss <eu@filipekiss.com.br> http://github.com/filipekiss
# --------------------------------------------------------------------------------------------------
#
# Based on the original script by
# -------------------------------
# Wynn Netherland - https://github.com/pengwynn
# Adam Jahnke - https://github.com/adamyonk
#
# Version
# -------
# 7.0.0
# --------------------------------------------------------------------------------------------------
#
# Usage
# -----
# mx <session name> [project] --pwd=PATH
#
# Arguments
# ---------
# All Arguments are optional.
#
# If no arguments are passed, mx will use the current folder name as a session name with proper
# escaping to ensure tmux compatibility
#
# session name
# ------------
# If a session name is passed, mx will do a few checks before putting you inside the session.
#
# First, it will check if you're trying to start a session that matches the 'dotfiles' name. If you
# are, mx will create a session for your dotfiles and set the WORKINGDIR to $HOME/.dotfiles
#
# If you're session is not 'dotfiles', mx will look for a folder with the same name under your home
# folder. So, for example, let's say you have a $HOME/work folder and you call `mx work`. Here's
# what mx will do:
#
#  * Will find the folder located at $HOME/work
#  * Will see if there's a session named work already. If there is, attach to it.
#  * If there's not a session, it will continue with it's own instructions to create the proper
#  session and then will attach you to it
#
# Finally, if you have a $PROJECTS variable set in you environment and there's a folder located at
# $PROJECTS/<session name>, mx will do the same steps as if it were in you $HOME
#
# project
# -------
# If you pass a second argument and you have a folder at this structure: $PROJECTS/<session name>/<project
# name>, it will open the project at the correct location. For example, I keep my projects in
# a `code` folder under my home dir. So my `pure` fork, por example, sits at $HOME/code/filipekiss/pure
# I can just call `mx filipekiss pure` and mx will set everything up for me, leaving me ready to
# work.
#
# --pwd=PATH
# The path to the working directory for the session you're opening. This allows
# you to start a named session without having to CD to the directory first
#
# Combined namespace/project name at session title
# ------------------------------------------------
# Sometimes I wish to work on multiple projects of the same namespace (let's say my
# [filipekiss/quick-tips] and my filipekiss/secret-projects). To achieve this, If `mx` receives
# a second argument, it will be appended to the session name. So `mx filipekiss quick-tips` will
# start a session name *filipekiss/quick-tips* on the directory $PROJECTS/filipekiss/quick-tips.
# If you wish to maintain a single session for each given "namespace", just set MX_UNIQUE_SESSIONS
# on your shell (put export MX_UNIQUE_SESSIONS="1" in your `~/.bashrc` or `~/.zshrc`).
# --------------------------------------------------------------------------------------------------

set -e
# source dotfiles "source"

_parse_arguments() {
    local arg
    local arg_idx
    arg_idx=0
    while (($# > 0)); do
        arg="$1"
        case "$arg" in
        --no-focus)
            _focus="no"
            ;;
        --pwd=*)
            _pwd=$(echo "$arg" | cut -d '=' -f2)
            ;;
        --pwd)
            _pwd=$2
            shift
            ;;
        --* | -*)
            shift
            ;;
        *)
            _try_mx_command "$arg" "$@"
            arg_idx=$((arg_idx + 1))
            [[ $arg_idx -eq 1 ]] && _namespace="${arg}"
            [[ $arg_idx -eq 2 ]] && _project_name="${arg}"
            ;;
        esac
        shift
    done
    return 0
}

_try_mx_command() {
    local _try_command="mx-$arg"
    if [[ -n $(type -p $_try_command) ]]; then
        shift
        shift
        exec "$_try_command" "$@"
        exit 0
    fi
}

_parse_arguments "$@"

_use_default_session_name() {
    SESSION="${PWD##*/}"
    NAMESPACE="${SESSION}"
}

if [[ -z ${_namespace} ]]; then
    _use_default_session_name
else
    SESSION="${_namespace}"
    NAMESPACE="${_namespace}"
fi

# tmux 1.9a+ doesn't like .'s in session names
SESSION="${SESSION//./}"
[[ "$SESSION" == *'dotfiles'* || "$PWD" == *'dotfiles'* ]] && SESSION='dotfiles'

if [[ -n "${_project_name}" && -z $MX_UNIQUE_SESSIONS ]]; then
    PROJECT_NAME="${_project_name}"
    SESSION="${SESSION}/${PROJECT_NAME//./}"
fi

if ! (tmux has-session -t "${SESSION}" >/dev/null 2>&1); then
    WORKINGDIR="${_pwd:-$PWD}"

    twidth=$(tput cols)
    theight=$(tput lines)

    # If running this from inside a tmux session, use tmux total width instead of current pane
    # width, which is what tput will provide
    if [[ -n $TMUX ]]; then
        twidth=$(tmux display-message -p '#{window_width}')
        theight=$(tmux display-message -p '#{window_height}')
    fi

    if [[ "$SESSION" == 'dotfiles' && -d "$HOME/dotfiles" ]]; then
        echo "Using dotfiles settings"
        WORKINGDIR="${HOME}/dotfiles"
    elif [ -d "${PROJECTS}/_Fork/${NAMESPACE}/${PROJECT_NAME}" ]; then
        echo "Found _Fork at ${PROJECTS}/_Fork/${NAMESPACE}/${PROJECT_NAME}"
        WORKINGDIR="${PROJECTS}/_Fork/${NAMESPACE}/${PROJECT_NAME}"
    elif [ -d "${PROJECTS}/_Repo/${NAMESPACE}/${PROJECT_NAME}" ]; then
        echo "Found _Repo at ${PROJECTS}/_Repo/${NAMESPACE}/${PROJECT_NAME}"
        WORKINGDIR="${PROJECTS}/_Repo/${NAMESPACE}/${PROJECT_NAME}"
    elif [ -d "${PROJECTS}/_Playground/${NAMESPACE}/${PROJECT_NAME}" ]; then
        echo "Found _Playground at ${PROJECTS}/_Playground/${NAMESPACE}/${PROJECT_NAME}"
        WORKINGDIR="${PROJECTS}/_Playground/${NAMESPACE}/${PROJECT_NAME}"
    elif [ -d "${PROJECTS}/${NAMESPACE}/$PROJECT_NAME" ]; then
        echo "Found project at ${HOME}/${NAMESPACE}/$PROJECT_NAME"
        WORKINGDIR="${PROJECTS}/${NAMESPACE}/$PROJECT_NAME"
    else
        echo "Using directory: $WORKINGDIR"
    fi

    # Expand possible ~ in variable if user pass --pwd option
    WORKINGDIR="${WORKINGDIR/#\~/$HOME}"

    tmux -f "$XDG_CONFIG_HOME/tmux/.tmux.conf" new-session -s "$SESSION" -n editor -d -c $WORKINGDIR -x $twidth -y $theight
    if [[ -x "${WORKINGDIR}/.mx-start" ]]; then
        tmux send-keys -t "$SESSION" "./.mx-start" C-m
    else
        # The default configuration for my workspace is as follows:
        # If the total width is below 120 columns wide, a window with no splits is open
        # If the total width is between 120 and 200, a 50/50 split is made
        # If the total width is larger than 200, set the right column to be 80 columns and the left
        # column will take as many columns as possible
        if [[ $twidth -ge 200 ]]; then
            SPLIT_ARGS="-h -l 80"
        elif [[ $twidth -ge 120 ]]; then
            SPLIT_ARGS="-h -p 50"
        fi

        tmux send-keys -t "$SESSION" "e" C-m
        if [[ -n $SPLIT_ARGS ]]; then
            tmux split-window $SPLIT_ARGS -c "$WORKINGDIR" -t "$SESSION"
            tmux send-keys -t "$SESSION" "ssh-add-if-git; clear" C-m
        fi
        tmux new-window -d -n 'shell' -t "$SESSION" -c $WORKINGDIR
        tmux select-window -t 1
        tmux select-pane -t 1
    fi
fi

if [[ -n $MX_BG || "${_focus:-yes}" == "no" ]]; then
    exit 0
fi

if [ -z "$TMUX" ]; then
    tmux attach -t "$SESSION"
else
    tmux switch-client -t "$SESSION"
fi
