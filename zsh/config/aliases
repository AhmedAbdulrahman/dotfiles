#!/usr/bin/env zsh
unalias mv rm cd mkdir 2>/dev/null;

# make sudo support alias
alias sudo='sudo '
alias usudo='sudo -E -s '

# ---------------------------------------------
# Shortcusts
# ---------------------------------------------

alias dot='cd ~/Projects/personal/dotfiles'
alias dl="cd ~/Downloads"
alias dk="cd ~/Desktop"
alias p="cd ~/Projects"
alias docs='cd ~/Documents/'
alias tmp='cd /tmp'
alias e="${(z)VISUAL:-${(z)EDITOR}}"

# ---------------------------------------------
# Moving around
# ---------------------------------------------
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias cdr='cd "$(git rev-parse --show-toplevel)"'

alias mks='tmux kill-session -t'
alias mkS='tmux kill-server'
# `rm` and `mv` are so dangerous, they must always ask for confirmation.
alias mv="${aliases[mv]:-mv} -iv"
alias ln="${aliases[ln]:-ln} -iv"
alias cp="${aliases[cp]:-cp} -iv"
alias rm="${aliases[rm]:-rm} -i"
alias mkdir="${aliases[mkdir]:-mkdir} -p" # Make missing parent directories when creating folders.
alias which='which -a'
alias type='type -a'

# ---------------------------------------------
# Npm & Yarn
# ---------------------------------------------
alias npm-update="npx npm-check -u"
alias flush-npm="rm -rf node_modules && npm i && echo NPM is done"
alias nicache="npm install --prefer-offline"
alias yoff="yarn add --offline";
alias ypm="echo \"Installing deps without lockfile and ignoring engines\" && yarn install --no-lockfile --ignore-engines"
alias KABOOM="yarn global upgrade --latest;brew update; brew upgrade; brew cleanup -s; brew doctor"


[[ "$OSTYPE" =~ linux ]] && alias rm='rm -Iv --one-file-system' || alias rm='rm -iv'

(( $+commands[tac]  )) || alias tac='tail -r'

alias pvim='vim -u NONE'
alias vv='vim $(fzf)'
alias vi=vim
alias vi2='vim -O2'
alias vw=gvim
alias em='emacsclient -t'
alias ew='emacsclient -c -a emacs'

alias svi='usudo vim'
alias svim='svi'

(( $+commands[bat] )) && alias cat='bat'
alias grep='grep --color=auto'
alias formatJSON='jq .'
alias history-stat="fc -l 1 | awk '{print \$2}' | sort | uniq -c | sort -n -r | head"
alias flushdns="sudo killall -HUP mDNSResponder"

alias ls='ls --color=auto'
alias ll='ls --group-directories-first -l'
alias la='ls --group-directories-first -l --all'
if (( $+commands[eza] )); then
    alias ls='eza --time-style long-iso --group-directories-first -m'
    alias ll='ls --icons -lgbh'
    alias la='ll -a'
    alias ldot='ll -d .*'
    alias lss='ll -s size'
    alias lst='ll -s modified'
    alias tree='ls --icons --tree --group-directories-first --almost-all -I "node_modules" '
fi

# copy alias
alias pc='pbcopy'
alias pp='pbpaste'
alias trimcopy="tr -d '\n' | pbcopy"	# Trim new lines and copy to clipboard

# Archlinux
# -F Causes less to automatically exit if the entire file can be displayed on one screen
(( $+commands[pacman] )) && alias autoremove='pacman -R $(pacman -Qdtq)'

(( $+commands[lein] )) && alias lrepl='lein repl :connect 59237'

# Edit dotfile in repo
function vim_linked() { vim "$(readlink "$1")" }
alias zshrc='vim_linked ~/.zshrc'
alias zshenv='vim_linked ~/.zshenv'
alias zshfzf='vim_linked ~/.config/zsh/config/zsh_fzf_extra'
alias zshalias='vim_linked ~/.config/zsh/config/zsh_aliases'
alias zshcustom='vim_linked ~/.config/zsh/config/zsh_custom'
alias zshmisc='vim_linked ~/.config/zsh/config/zsh_misc'
alias zshlocal='vim ~/.config/zsh/config/zsh_local'
alias zshsec='vim_linked ~/.config/zsh/config/zsh_secret'
alias tmuxconf='vim_linked ~/.tmux.conf'

alias csort='LC_ALL=C sort'

alias localdocker='DOCKER_HOST= DOCKER_TLS_PATH= DOCKER_TLS_VERIFY= docker'
(( $+commands[cargo] )) && alias rust-musl-builder='localdocker run --rm --name rust-musl-builder -it -v "$(pwd)":/home/rust/src ekidd/rust-musl-builder'

# https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git/git.plugin.zsh
alias gc='git commit -v'
alias gb='git branch'
alias gl='git pull'
alias gp='git push'
alias gpu='git push upstream'
# alias gco='git checkout'
alias gst='git status'
alias gstu='git status -uno'
alias gs='git stash'
alias gsp='git stash pop'
alias gr='git rebase'

alias mycli='LESS="-S $LESS" mycli'

alias k='kubectl'
alias ka='kubectl apply --recursive -f'
alias kex='kubectl exec -it'
alias klo='kubectl logs -f'
alias kg='kubectl get'
alias kd='kubectl describe'

(( $+commands[btm] )) && alias htop='btm -n -b'

alias ui_syncthing='xdg-open "http://127.0.0.1:8384/"'
alias ui_v2ray='xdg-open "http://127.0.0.1:2017/"'
alias ui_flink='xdg-open "http://127.0.0.1:8081/"'

alias cm='cargo make'
alias ct='cargo make test'
alias cr='cargo make run'

alias ta='tmux attach -t'
alias tcap='tmux capture-pane -JpS -'

if (( ${+commands[wget]} )); then
  alias get='wget --continue --progress=bar --timestamping'
elif (( ${+commands[curl]} )); then
  alias get='curl --continue-at - --location --progress-bar --remote-name --remote-time'
fi

# ---------------------------------------------
# Timewarrior & Taskwarrior
# ---------------------------------------------
alias tiw='timew'
alias "tiw sum"='timew summary'
alias "tiws"='timew start'
alias "tiwp"='timew stop'
alias "tiwt"='timew stop'
# reports, in current context
alias tard="task burndown.daily"
alias tarw="task burndown.weekly"
alias tarm="task burndown.monthly"
# Closed today
alias twctoday='task end:today all'
# Done today
alias twdtoday='task end:today status:completed all'
alias twlist="clear; task list -BLOCKED"
alias twcl="clear; task newest"
# list main categories (projects)
alias twlistprojects="task projects rc.list.all.projects=yes 2>/dev/null | grep -E '^\w'"
# list all projects
alias twlistall="task projects rc.list.all.projects=yes"
alias twclear="clear; task +READY"
alias twsum="task summary"
alias twallsum="task summary rc.summary.all.projects=yes"

# ---------------------------------------------
# IP Addresses
# ---------------------------------------------
alias ip='dig +short myip.opendns.com @resolver1.opendns.com'
alias localip="ipconfig getifaddr en1"
alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"
alias myip="ifconfig | grep 'inet ' | grep -v 127.0.0.1 | awk '{print \$2}'"
alias lsof-tcp='lsof -iTCP'
alias lsof-tcp-listen='lsof -iTCP -sTCP:LISTEN -P'
alias hosts='sudo $EDITOR /etc/hosts'

# ---------------------------------------------
# Tmux
# ---------------------------------------------
# alias tmux='tmux -f "~/.tmux.conf"'
alias mks='tmux kill-session -t'
alias mkS='tmux kill-server'
alias tn='tmux new-session -s'
alias tl='tmux list-sessions'

# Conditional Tmux aliases
[[ $TERM == *"tmux"* ]] && alias :sp='tmux split-window'
[[ $TERM == *"tmux"* ]] && alias :vs='tmux split-window -h'
# SSH when in TMUX needs to explicitly pass $TERM
[[ $TERM == *"tmux"* ]] && alias ssh="TERM=xterm-256color ssh"
[[ $TERM == *"tmux"* ]] && alias vagrant="TERM=xterm-256color vagrant"
[[ $TERM == *"tmux"* ]] && alias brew="TERM=xterm-256color brew"

# ---------------------------------------------
# Docker
# ---------------------------------------------
# # Get latest container ID
# alias dl="docker ps -l -q"
# # Get container process
# alias dps="docker ps"
# # Get process included stop container
# alias dpa="docker ps -a"
# # Get images
# alias di="docker images"
# # Get container IP
# alias dip="docker inspect --format '{{ .NetworkSettings.IPAddress }}'"
# # Run deamonized container, e.g., $dkd base /bin/echo hello
# alias dkd="docker run -d -P"
# # Run interactive container, e.g., $dki base /bin/bash
# alias dki="docker run -i -t -P"
# # Execute interactive container, e.g., $dex base /bin/bash
# alias dex="docker exec -i -t"

# ---------------------------------------------
# Utilities
# ---------------------------------------------
alias "?"="pwd"
alias sz='exec zsh'
alias refresh='source ~/.zshrc; echo "Reloaded .zshrc."'
alias note='nvim ~/Documents/Notes/note'
alias reload="exec ${SHELL} -l"	# Reload the shell (i.e. invoke as a login shell)
alias path='echo -e ${PATH//:/\\n}'	# Print each PATH entry on a separate line
alias bye='sudo shutdown -h now'
alias ios='open -a /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/Applications/iPhone\ Simulator.app'
alias chromekill="ps ux | grep '[C]hrome Helper --type=renderer' | grep -v extension-process | tr -s ' ' | cut -d ' ' -f2 | xargs kill"	# Kill all the tabs in Chrome to free up memory

# ---------------------------------------------
# System
# ---------------------------------------------
alias cpu='top -n 10 -o cpu -O time -stats pid,command,cpu,cpu_me,time,threads,ports' # CPU
alias mem='top -o rsize' # Memory
alias df='df --all --si --print-type' # Display all disk usage statistics with SI units and FS types.
alias du='du --max-depth=1 --si' # Display size of files and folders under current directory.
alias diskspace='du -h -d 2'
alias fs="stat -f \"%z bytes\""		# File size
alias diskspace_report="df -P -kHl"
alias free_diskspace_report="diskspace_report"
# alias afk="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"	# Lock the screen (when going AFK = Away From Keyboard)

# ---------------------------------------------
# Cleaners
# ---------------------------------------------
alias rm_modules="find . -name 'node_modules' -type d -prune -exec rm -rf '{}' +"
alias emptytrash="sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv /private/var/log/asl/*.asl; sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* 'delete from LSQuarantineEvent'"

# ---------------------------------------------
# Useful stuff - for LiveStream
# ---------------------------------------------
alias showhidden="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder" # Show hidden files in Finder
alias hidehidden="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder" # Hide hidden files in Finder
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"	# Show all desktop icons
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder" # Hide all desktop icons
# Livestream Mode - (no dock, hide, clean trash ...etc)
alias livestream_mode='defaults write com.apple.dock autohide -bool true;
							 killall Dock;
							 defaults write com.apple.menuextra.clock IsAnalog -bool true;
							 killall SystemUIServer;
							 rm -rf ~/.Trash/*;'

# Set everything back to Normal (Regular Mode)
alias regular_mode='defaults write com.apple.dock autohide -bool false
							killall Dock;
							defaults write com.apple.menuextra.clock IsAnalog -bool false;
							killall SystemUIServer;'
(( $+commands[gnumfmt] )) && alias numfmt=gnumfmt
(( $+commands[gdate] )) && alias date=gdate
(( $+commands[gsed] )) && alias sed=gsed
(( $+commands[gawk] )) && alias awk=gawk
(( $+commands[fdfind])) && alias fd=fdfind
(( $+commands[fd])) && alias ffd='fd -uLE .git'

alias yy=clitrans
alias y=yazi


# alias kitty-native='kitty --session ~/.config/kitty/sessions/work.conf'

# ---------------------------------------------
# Conditional aliases
# ---------------------------------------------
if (( $+commands[nvim] )) then;
  	# Use `\vim` or `command vim` to get the real vim.
	alias vim='nvim'
	alias vv='vim $(fzf)'
	alias ez="vim ~/.zsh/.zshrc"
fi

if (( $+commands[hub] )); then
    alias git=hub
fi
# better ls
if (($+commands[colorls])); then
	alias ls="echo; colorls -A --group-directories-first"
fi

if (( $+commands[lsd] )); then
  alias ls="lsd "
  alias ll="lsd --tree --almost-all --group-dirs first "
elif (( $+commands[tree] )); then
  alias ll="type tree >/dev/null && tree -da -L 1 || l -d .*/ */ "
else
  alias ll="echo 'You have to install lsd or tree'"
fi

# Jq
if (( $+commands[jq] )) then;
  alias formatJSON='jq .'
else
  alias formatJSON='python -m json.tool'
fi

# File Download
if (( $+commands[aria2c] )); then
  alias get='aria2c --continue --remote-time --file-allocation=none'
elif (( $+commands[curl] )); then
  alias get='curl --continue-at - --location --progress-bar --remote-name --remote-time'
elif (( $+commands[wget] )); then
  alias get='wget --continue --progress=bar --timestamping'
fi

if (( $+commands[htop] )); then
  alias top=htop
fi

# Ranger file explorer
if (( $+commands[ranger] )); then
    unalias r 2>/dev/null
    alias r=ranger
fi
